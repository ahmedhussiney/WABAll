<?xml version="1.0" encoding="UTF-8"?><snippets><snippet name="pulseVS"><![CDATA[
  $defines attribute vec3 $position; attribute vec3 $auxpos1; uniform float vme;uniform mat4 pmt;uniform mat4 vmt;uniform bool drg;uniform float wss;uniform sampler2D svfe;uniform sampler2D evfe;uniform vec2 vfvs;uniform float ail;uniform vec2 irs;uniform float fte;uniform vec2 wmmv;uniform bool rpt;uniform sampler2D cbte;varying vec3 y;varying vec3 x;varying vec2 w;varying vec4 v; $translationMat $linearInterpolator $localTrans $expoEaseOut void main(void){float a=fract($auxpos1.x/vfvs.x);float b=floor($auxpos1.x/vfvs.y)/vfvs.y;float c=(texture2D(svfe,vec2(a,b))).r;float d=(texture2D(evfe,vec2(a,b))).r;float e=mod(fte,ail);float f=getExpoEaseOutValue(e,c,d,ail);if(rpt) f=d;float g=getLinearValue(wmmv,f);if(drg){float h=200000.0;if($auxpos1.y==0.0||$auxpos1.y==3.0){h=getScope(irs,g);}else if($auxpos1.y==1.0||$auxpos1.y==2.0){h=1.25*getScope(irs,g);}if($auxpos1.y==0.0) w=vec2(0.0,0.0);else if($auxpos1.y==3.0) w=vec2(0.0,1.0);else if($auxpos1.y==1.0) w=vec2(1.0,0.0);else if($auxpos1.y==2.0) w=vec2(1.0,1.0);float i=$auxpos1.z*2.0*PI;vec3 j=vec3(h*cos(i),h*sin(i),0.0);vec3 k,l;mat4 m=mat4(1.0);if(vme==0.0){mat4 n=getTransMat($position);m=toRotationMat(n);k=(n*vec4(j,1.0)).xyz;vec4 o=vec4(0.0,0.0,1.0,0.0);l=(m*o).xyz;}else{k=wgs84ToWebMerc($position);k+=j;l=vec3(1.0,0.0,1.0);}gl_Position=pmt*vmt*vec4(k,1.0);y=normalize(l);x=k;v=texture2D(cbte,vec2(g,0.5));}else{float p=getScope(irs,g);mat4 n=getTransMat($position);float q=($auxpos1.y-wss/2.0)*(20.0/wss);float r=($auxpos1.z-wss/2.0)*(20.0/wss);float s=exp(-0.0831*(q*q+r*r));float t=atan(q,r);q=s*cos(2.0*t);r=s*sin(2.0*t);float u=sqrt(q*q+r*r)*getScope(irs,g);vec3 k=(n*vec4(p*($auxpos1.y/wss-0.5),p*($auxpos1.z/wss-0.5),u,1.0)).xyz;vec3 l=normalize(k);gl_Position=pmt*vmt*vec4(k,1.0);y=l;x=k;w=$auxpos1.yz/(wss-1.0);}}
]]></snippet><snippet name="pulseFS"><![CDATA[
  #ifdef GL_ES
  precision mediump float;
  #endif
  uniform vec3 ldn;uniform vec4 lat;uniform vec4 lde;uniform vec4 lsr;uniform vec3 cps;uniform float tcy;uniform vec3 scr;varying vec2 w;varying vec3 y;varying vec3 x;varying vec4 v;const vec3 a=vec3(1.0,1.0,1.0);const vec3 b=vec3(1.0,1.0,1.0);const vec3 c=vec3(0.4,0.4,0.4);void main(){vec3 d=normalize(x-cps);vec3 e=normalize(y);vec3 f=normalize(reflect(d,e));float g=max(dot(f,ldn),.001);vec3 h=c*lsr.rgb*lsr.w*pow(g,16.0);vec3 i=a*lde.rgb*lde.w*clamp(dot(e,ldn),.0,1.0);vec3 j=b*lat.rgb*lat.w;vec3 k=vec3(j+i+h);float l=abs(w.x-0.5)/0.5;gl_FragColor=(1.0-l)*vec4(scr,1.0)+l*v;gl_FragColor*=vec4(k,1.0);float m=tcy*0.01;gl_FragColor.w=m;}
]]></snippet></snippets>